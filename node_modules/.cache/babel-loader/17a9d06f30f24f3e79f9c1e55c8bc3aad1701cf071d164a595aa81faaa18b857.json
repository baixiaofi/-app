{"ast":null,"code":"import axios from 'axios';\nconst requests = axios.create({\n  // 配置对象\n  // 基础路径，发请求的时候，路径当中会出现api\n  baseURL: \"/api\",\n  // 请求超时的时间\n  timeout: 5000\n});\n// 请求拦截器：在发请求之前，请求拦截器可以检测到，可以再请求发出之前做一些事情\nrequests.interceptors.request.use(config => {\n  return config;\n});\n// 相应拦截器\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情\n  return res.data;\n}, error => {\n  // 服务器响应失败的回调函数\n  return Promise.reject(new Error('faile'));\n});\n// 对外暴露\nexport default requests;","map":{"version":3,"names":["axios","requests","create","baseURL","timeout","interceptors","request","use","config","response","res","data","error","Promise","reject","Error"],"sources":["C:/Users/Administrator/Desktop/project-spg/app/src/api/request.js"],"sourcesContent":["import axios  from 'axios'\r\n\r\nconst requests = axios.create({\r\n    // 配置对象\r\n    // 基础路径，发请求的时候，路径当中会出现api\r\n    baseURL: \"/api\",\r\n    // 请求超时的时间\r\n    timeout: 5000,\r\n});\r\n// 请求拦截器：在发请求之前，请求拦截器可以检测到，可以再请求发出之前做一些事情\r\nrequests.interceptors.request.use((config) => {\r\n\r\n    return config\r\n})\r\n// 相应拦截器\r\nrequests.interceptors.response.use((res) => {\r\n    // 成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情\r\n    return res.data;\r\n}, (error) => {\r\n    // 服务器响应失败的回调函数\r\n    return Promise.reject(new Error('faile'))\r\n})\r\n// 对外暴露\r\nexport default requests;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAO,OAAO;AAE1B,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC1B;EACA;EACAC,OAAO,EAAE,MAAM;EACf;EACAC,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAE1C,OAAOA,MAAM;AACjB,CAAC,CAAC;AACF;AACAP,QAAQ,CAACI,YAAY,CAACI,QAAQ,CAACF,GAAG,CAAEG,GAAG,IAAK;EACxC;EACA,OAAOA,GAAG,CAACC,IAAI;AACnB,CAAC,EAAGC,KAAK,IAAK;EACV;EACA,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7C,CAAC,CAAC;AACF;AACA,eAAed,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}